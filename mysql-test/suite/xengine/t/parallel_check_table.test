SET @start_global_value = @@global.xengine_parallel_read_threads;
SELECT @start_global_value;

create table t1(id int, a char(20),  b text, primary key(id), key k1(a(8)), unique key k2(b(8))) engine=xengine;
create table t2(id int, a char(20),  b text, primary key(id), key k1(b(8)), unique key k2(a(8))) engine=xengine;
create table t3(id int, a char(20),  b text, primary key(a(8)), key k1(id), unique key k2(b(8))) engine=xengine;
create table t4(id int, a char(20),  b text, primary key(a(8)), key k1(b(8)), unique key k2(id)) engine=xengine;
create table t5(id int, a char(20),  b text, primary key(b(8)), key k1(id), unique key k2(a(8))) engine=xengine;
create table t6(id int, a char(20),  b text, primary key(b(8)), key k1(a(8)), unique key k2(id)) engine=xengine;

create table t7(id int, a char(20),  b text, primary key(id, a(8)), key k1(b(8))) engine=xengine;
create table t8(id int, a char(20),  b text, primary key(id), key k1(a(8), b(8))) engine=xengine;
create table t9(id int, a char(20),  b text, primary key(id), unique key k2(a(8), b(8))) engine=xengine;

let $i=1;
let $delta = 1;
let $max = 10;

eval begin;
while ($i < $max) {
  eval insert into t$i values(1, '1234567890', '0987654321');
  eval insert into t$i values(2, '0987654321', '1234567890');

  eval check table t$i;
  eval set xengine_parallel_read_threads=2;
  eval check table t$i;
  eval set xengine_parallel_read_threads=8;
  eval check table t$i;

  # clean
  eval drop table t$i;

  expr $i = $i + $delta;
}
eval commit;


# hidden primary key check
create table t10 (a int, b int, key ka(a), key kb(b)) engine=xengine;
insert into t10 values(1, 5);
insert into t10 values(2, 6);
check table t10;
drop table t10;

#
# Recover start variable
#
SET @@global.xengine_parallel_read_threads = @start_global_value;
SELECT @@global.xengine_parallel_read_threads;


