
## Test TSO query with galaxy parallel

--source include/xplugin_preamble.inc
--source include/xplugin_create_user.inc

call mtr.add_suppression("Timestamp service failed to open");
call mtr.add_suppression("tso get failed");
## Test starts here
--write_file $MYSQL_TMP_DIR/galaxy_parallel_tso.tmp
## Test data
-->sql

## give access of galaxy session.
CREATE USER 'x_root'@'galaxy' IDENTIFIED WITH 'mysql_native_password';
GRANT ALL ON *.*TO 'x_root'@'galaxy' WITH GRANT OPTION;
FLUSH PRIVILEGES;

create sequence mysql.gts_base cache 1 timestamp;
-->endsql

## switch GSession ID to 2(1 is default session)
-->switchsid 2

## first start new session
Mysqlx.Session.NewSession {
}

## expect Mysqlx.Ok
-->recv

## get TSO within GSession ID 2
Mysqlx.GetTSO {
  leader_name: "zzy"
  batch_count: 10
}
-->recv

## Switch to default and do clean up.
-->switchsid 1

## Cleanup TSO
-->sql
drop sequence if exists mysql.gts_base;
-->endsql

## Switch back to GSession ID 2 and continue test.
-->switchsid 2

Mysqlx.GetTSO {
  leader_name: "zzy"
  batch_count: 10
}
-->recverror ER_X_GALAXY_TSO_FAILED

## Close parallel session.

## close session.
Mysqlx.Session.Close {
}

## expect Mysqlx.Ok
-->recv

## switch back to default session.
-->switchsid 1

## Cleanup user
-->sql
DROP USER 'x_root'@'galaxy';
FLUSH PRIVILEGES;
-->endsql
EOF

--replace_regex /ts: [0-9]+/ts: x/
--exec $GALAXYXTEST -ux_root --password='' --file=$MYSQL_TMP_DIR/galaxy_parallel_tso.tmp 2>&1

## Cleanup
--remove_file $MYSQL_TMP_DIR/galaxy_parallel_tso.tmp
--source include/xplugin_drop_user.inc
