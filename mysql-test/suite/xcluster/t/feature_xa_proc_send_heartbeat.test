--source include/have_debug.inc

create table t1 (id int);
insert into t1 values (1);
set session debug = "+d, hb_timeout_do_not_freeze_operation";

--connect (conn1,127.0.0.1,root,,test,$MYPORT_1)
--connection conn1
flush local logs;
set global innodb_scn_history_task_enabled = on;
set global innodb_scn_history_interval = 1;
set global innodb_freeze_db_if_no_cn_heartbeat_timeout_sec = 1;
show variables like "innodb_undo_retention";

--connect (conn2,127.0.0.1,root,,test,$MYPORT_2)
--connection conn2
set global innodb_scn_history_task_enabled = on;
set global innodb_scn_history_interval = 1;
set global innodb_freeze_db_if_no_cn_heartbeat_timeout_sec = 1;
flush local logs;
show variables like "innodb_undo_retention";

--connection conn1
set session debug = "+d, hb_timeout_do_not_freeze_operation";

--echo ###############################
--echo # case 1
--echo ###############################

--connection conn1
sleep 2;
--let $timestamp = `select now()`
sleep 1;
update t1 set id = id + 1;
sleep 2;
select * from t1;
--disable_query_log
--error ER_SNAPSHOT_TOO_OLD
--eval select * from t1 as of timestamp "$timestamp"
--enable_query_log

set global innodb_freeze_db_if_no_cn_heartbeat_enable = on;
sleep 2;
--let $timestamp = `select now()`
sleep 1;
update t1 set id = id + 1;
sleep 2;
select * from t1;
--disable_query_log
--eval select * from t1 as of timestamp "$timestamp"
--enable_query_log

set global innodb_freeze_db_if_no_cn_heartbeat_enable = off;
sleep 2;
--disable_query_log
--error ER_SNAPSHOT_TOO_OLD
--eval select * from t1 as of timestamp "$timestamp"
--enable_query_log

--echo ###############################
--echo # case 2
--echo ###############################
# --connection conn2
# sleep 2;
# --let $timestamp = `select now()`
# sleep 1;
# --connection conn1
# update t1 set id = id + 1;
# --connection conn2
# sleep 2;
# --source include/wait_apply_catchup.inc
# select * from t1;
# --disable_query_log
# --error ER_SNAPSHOT_TOO_OLD
# --eval select * from t1 as of timestamp "$timestamp"
# --enable_query_log
# 
# set global innodb_freeze_db_if_no_cn_heartbeat_enable = on;
# sleep 2;
# --let $timestamp = `select now()`
# sleep 1;
# --connection conn1
# update t1 set id = id + 1;
# --connection conn2
# sleep 2;
# --source include/wait_apply_catchup.inc
# select * from t1;
# --disable_query_log
# --eval select * from t1 as of timestamp "$timestamp"
# --enable_query_log
# 
# set global innodb_freeze_db_if_no_cn_heartbeat_enable = off;
# sleep 2;
# --disable_query_log
# --error ER_SNAPSHOT_TOO_OLD
# --eval select * from t1 as of timestamp "$timestamp"
# --enable_query_log

--echo ###############################
--echo # case 3
--echo ###############################
# --connection conn2
# set global innodb_freeze_db_if_no_cn_heartbeat_enable = on;
--connection conn1
set global innodb_freeze_db_if_no_cn_heartbeat_enable = on;
sleep 2;
--let $timestamp = `select now()`
sleep 1;
update t1 set id = id + 1;
sleep 2;
select * from t1;
--disable_query_log
--eval select * from t1 as of timestamp "$timestamp"
--enable_query_log

# Heartbeat have not timeout, so the purge will not be blocked.
# --connection conn2
# set global innodb_freeze_db_if_no_cn_heartbeat_timeout_sec = 3;
--connection conn1
set global innodb_freeze_db_if_no_cn_heartbeat_timeout_sec = 3;
call dbms_xa.send_heartbeat();
sleep 2;
--disable_query_log
--error ER_SNAPSHOT_TOO_OLD
--eval select * from t1 as of timestamp "$timestamp"
--enable_query_log

# --echo # this command should also be sended to the slave.
# --connection conn2
# --disable_query_log
# --error ER_SNAPSHOT_TOO_OLD
# --eval select * from t1 as of timestamp "$timestamp"
# --enable_query_log

# Heartbeat timeout, so the purge sys will be blocked.
--connection conn1
sleep 1;
sleep 2;
--let $timestamp = `select now()`
sleep 1;
update t1 set id = id + 1;
sleep 2;
select * from t1;
--disable_query_log
--eval select * from t1 as of timestamp "$timestamp"
--enable_query_log

# --connection conn2
# select * from t1;
# --disable_query_log
# --eval select * from t1 as of timestamp "$timestamp"
# --enable_query_log

--echo ###############################
--echo # case 4
--echo ###############################
set global innodb_freeze_db_if_no_cn_heartbeat_timeout_sec = 1;
call dbms_xa.send_heartbeat();

--echo # trigger purge to advance and set freeze.
sleep 2;
update t1 set id = id + 1;
set session debug = "-d, hb_timeout_do_not_freeze_operation";

--echo # Be not able to execute the following statement
sleep 2;
--error ER_XA_PROC_HEARTBEAT_FREEZE
update t1 set id = id + 1;

--echo # Be able to execute the following statement
call dbms_xa.send_heartbeat();
update t1 set id = id + 1;

--echo ###############################
--echo # case 5
--echo ###############################
--connection conn2
set global innodb_freeze_db_if_no_cn_heartbeat_enable = on;

--connection conn1
set global innodb_freeze_db_if_no_cn_heartbeat_enable = 0;
--echo # trigger slave's purge to advance and set freeze.
sleep 2;
update t1 set id = id + 1;

sleep 2;
insert into t1 values (1000);

--connection conn2
sleep 1;
select count(*) from t1 where id = 1000;

set global innodb_freeze_db_if_no_cn_heartbeat_timeout_sec = 1000;
call dbms_xa.send_heartbeat();
sleep 3;
select * from t1;

--echo ###############################
--echo # cleanup
--echo ###############################
--connection conn1
set global innodb_scn_history_task_enabled = default;
set global innodb_scn_history_interval = default;
set global innodb_freeze_db_if_no_cn_heartbeat_timeout_sec = default;
set global innodb_freeze_db_if_no_cn_heartbeat_enable = default;
--disconnect conn1

--connection conn2
--disconnect conn2

--connection default
drop table t1;
set session debug = "-d, hb_timeout_do_not_freeze_operation";

